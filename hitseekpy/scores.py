# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_scores.ipynb.

# %% auto 0
__all__ = ['get_percentages_of_controls', 'get_npis', 'get_z_scores', 'get_b_scores', 'get_ssmd']

# %% ../nbs/00_scores.ipynb 6
def _plate_idx_to_flat(index_list: List[Tuple[int, int]], to_shape: Tuple[int, int]):
    multi_index_np = np.array(list(zip(*index_list)))
    return np.ravel_multi_index(multi_index_np, to_shape)

def get_percentages_of_controls(vals: np.array, control_idx: List[Tuple[int, int]]):
    control_flat_idx = _plate_idx_to_flat(control_idx, vals.shape)
    control_vals = vals[control_flat_idx]
    return vals / np.mean(control_vals) * 100

def get_npis(vals: np.array, pos_control_idx: List[Tuple[int, int]], neg_control_idx: List[Tuple[int, int]]):
    pos_control_flat_idx = _plate_idx_to_flat(pos_control_idx, vals.shape)
    neg_control_flat_idx = _plate_idx_to_flat(neg_control_idx, vals.shape)
    pos_mean = np.mean(vals[pos_control_flat_idx])
    neg_mean = np.mean(vals[neg_control_flat_idx])
    return (pos_mean - vals) / (pos_mean - neg_mean)

def get_z_scores(vals: np.array, robust: bool = True):
    mu = np.median(vals) if robust else np.mean(vals)
    sigma = np.mean(np.abs(vals - mu)) if robust else np.std(vals)
    return (vals - mu) / sigma

def get_b_scores(vals: np.array, iters: int = 5):
    # https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5001608/pdf/gkw554.pdf
    # https://mgimond.github.io/ES218/Week11a.html
    # https://github.com/Palpatineli/median_polish/blob/master/median_polish/main.py
    centered = vals.copy()
    centered -= np.median(centered)
    median_margins = [0] * 2
    margins = [np.zeros(shape=centered.shape[idx]) for idx in range(2)]
    dim_mask = np.ones(2, dtype=int)

    for _ in range(iters):
        for dim_id in range(2):
            rest_dim = 1 - dim_id
            temp_median = np.median(centered, axis=rest_dim)
            margins[dim_id] += temp_median
            median_margins[rest_dim] = np.median(margins[rest_dim])
            margins[rest_dim] -= median_margins[rest_dim]
            dim_mask[dim_id] = -1
            centered -= temp_median.reshape(dim_mask)
            dim_mask[dim_id] = 1

    mad = np.median(np.abs(vals - np.median(vals)))

    return {
        "normalized": centered / mad,
        "row_effect": margins[1],
        "column_effect": margins[0]
    }

def get_ssmd(pop_1, pop_2):
    return (np.mean(pop_1) - np.mean(pop_2)) / np.sqrt(np.var(pop_1) + np.var(pop_2))
